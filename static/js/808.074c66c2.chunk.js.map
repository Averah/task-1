{"version":3,"file":"static/js/808.074c66c2.chunk.js","mappings":";2KAYO,MAAMA,GAAwDC,EAAAA,EAAAA,OAAKC,IAA2D,IAA1D,UAAEC,EAAS,SAAEC,EAAQ,aAAEC,KAAiBC,GAAYJ,EAC3H,MAAOK,EAAiBC,IAAsBC,EAAAA,EAAAA,UAAS,GAEjDC,GAAWC,EAAAA,EAAAA,UAAuB,SAAAC,EAAAC,EAAA,MAAO,CAC3CC,MAAoC,QAA/BF,EAAEP,EAAaE,UAAgB,IAAAK,OAAA,EAA7BA,EAA+BG,UACtCC,WAAyC,QAA/BH,EAAER,EAAaE,UAAgB,IAAAM,OAAA,EAA7BA,EAA+BG,WAC9C,GAAG,CAACT,IAGCU,GAAcC,EAAAA,EAAAA,cAAY,KAC5BV,GAAmBW,GAAWA,IAAYd,EAAae,OAAS,EAAI,EAAID,EAAU,GAAE,GACrF,IAEH,OACIE,EAAAA,EAAAA,KAACC,EAAAA,EAAM,CAACC,QAASN,EAAaO,MAAOd,EAAUP,UAAWA,KAAeG,EAAUF,SAC9EA,GACI,ICLjB,GAlB6BH,EAAAA,EAAAA,OAAK,KAE9B,MAAMI,GAAeM,EAAAA,EAAAA,UAAsB,IACvC,CACI,CAAEK,WAAY,OAAQD,UAAW,QACjC,CAAEC,WAAY,OAAQD,UAAW,QACjC,CAAEC,WAAY,MAAOD,UAAW,UACjC,IAEP,OACIU,EAAAA,EAAAA,MAACC,EAAAA,EAAU,CAAAtB,SAAA,EACPiB,EAAAA,EAAAA,KAAA,KAAAjB,SAAG,iBACHiB,EAAAA,EAAAA,KAACrB,EAAkB,CAACK,aAAcA,EAAaD,SAAC,2CACvC,+ECjBrB,QAAyB,oCCKzB,MAQA,GARsCH,EAAAA,EAAAA,OAAKC,IAA6C,IAA5C,SAAEE,EAAQ,UAAED,KAAcG,GAAYJ,EAC9E,OACImB,EAAAA,EAAAA,KAAA,UAAQlB,UAAWwB,IAAGC,EAAezB,MAAgBG,EAAUF,SAC1DA,GACI,iBCVjB,OAOC,WACA,aAEA,IAAIyB,EAAS,CAAC,EAAEC,eAEhB,SAASC,IAGR,IAFA,IAAIC,EAAU,GAELC,EAAI,EAAGA,EAAIC,UAAUd,OAAQa,IAAK,CAC1C,IAAIE,EAAMD,UAAUD,GAChBE,IACHH,EAAUI,EAAYJ,EAASK,EAAWF,IAE5C,CAEA,OAAOH,CACR,CAEA,SAASK,EAAYF,GACpB,GAAmB,kBAARA,GAAmC,kBAARA,EACrC,OAAOA,EAGR,GAAmB,kBAARA,EACV,MAAO,GAGR,GAAIG,MAAMC,QAAQJ,GACjB,OAAOJ,EAAWS,MAAM,KAAML,GAG/B,GAAIA,EAAIM,WAAaC,OAAOC,UAAUF,WAAaN,EAAIM,SAASA,WAAWG,SAAS,iBACnF,OAAOT,EAAIM,WAGZ,IAAIT,EAAU,GAEd,IAAK,IAAIa,KAAOV,EACXN,EAAOiB,KAAKX,EAAKU,IAAQV,EAAIU,KAChCb,EAAUI,EAAYJ,EAASa,IAIjC,OAAOb,CACR,CAEA,SAASI,EAAaW,EAAOC,GAC5B,OAAKA,EAIDD,EACIA,EAAQ,IAAMC,EAGfD,EAAQC,EAPPD,CAQT,CAEqCE,EAAOC,SAC3CnB,EAAWoB,QAAUpB,EACrBkB,EAAOC,QAAUnB,QAKhB,KAFwB,EAAF,WACtB,OAAOA,CACP,UAFoB,OAEpB,YAIF,CArEA","sources":["ui/SwitchColorsButton/SwitchColorsButton.tsx","pages/ButtonPage/ButtonPage.tsx","webpack://first-task/./src/ui/Button/Button.module.css?be3d","ui/Button/Button.tsx","../node_modules/classnames/index.js"],"sourcesContent":["import React, { CSSProperties, memo, useCallback, useMemo, useState } from 'react';\r\nimport Button, { ButtonProps } from '../Button/Button';\r\n\r\nexport interface ColorStyle {\r\n    background: string;\r\n    textColor: string;\r\n}\r\n\r\ninterface SwitchColorsButtonProps extends ButtonProps {\r\n    switchColors: ColorStyle[];\r\n}\r\n\r\nexport const SwitchColorsButton: React.FC<SwitchColorsButtonProps> = memo(({ className, children, switchColors, ...otherProps }) => {\r\n    const [currentColorIdx, setCurrentColorIdx] = useState(0);\r\n\r\n    const btnStyle = useMemo<CSSProperties>(() => ({\r\n        color: switchColors[currentColorIdx]?.textColor,\r\n        background: switchColors[currentColorIdx]?.background,\r\n    }), [currentColorIdx]);\r\n\r\n\r\n    const handleClick = useCallback(() => {\r\n        setCurrentColorIdx(prevIdx => prevIdx === switchColors.length - 1 ? 0 : prevIdx + 1);\r\n    }, []);\r\n\r\n    return (\r\n        <Button onClick={handleClick} style={btnStyle} className={className} {...otherProps}>\r\n            {children}\r\n        </Button>\r\n    );\r\n});\r\n","import React, { useMemo } from \"react\";\r\nimport { memo } from 'react';\r\nimport { PageLayout } from \"../../components/PageLayout/PageLayout\";\r\nimport { ColorStyle, SwitchColorsButton } from \"../../ui/SwitchColorsButton/SwitchColorsButton\";\r\n\r\nconst ButtonPage: React.FC = memo(() => {\r\n\r\n    const switchColors = useMemo<ColorStyle[]>(() =>\r\n        [\r\n            { background: '#fff', textColor: '#000' },\r\n            { background: '#000', textColor: '#fff' },\r\n            { background: 'red', textColor: 'blue' },\r\n        ], [])\r\n\r\n    return (\r\n        <PageLayout>\r\n            <b>Button Page</b>\r\n            <SwitchColorsButton switchColors={switchColors}>Кнопка</SwitchColorsButton>\r\n        </PageLayout>\r\n\r\n    )\r\n});\r\n\r\nexport default ButtonPage;","// extracted by mini-css-extract-plugin\nexport default {\"Button\":\"Button_Button__c5zJp\"};","import React, { memo } from 'react';\r\nimport cn from 'classnames';\r\nimport styles from './Button.module.css';\r\n\r\nexport type ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement>;\r\n\r\nconst Button: React.FC<ButtonProps> = memo(({ children, className, ...otherProps }) => {\r\n    return (\r\n        <button className={cn(styles.Button, className)} {...otherProps}>\r\n            {children}\r\n        </button>\r\n    );\r\n});\r\n\r\nexport default Button;","/*!\n\tCopyright (c) 2018 Jed Watson.\n\tLicensed under the MIT License (MIT), see\n\thttp://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = '';\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (arg) {\n\t\t\t\tclasses = appendClass(classes, parseValue(arg));\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction parseValue (arg) {\n\t\tif (typeof arg === 'string' || typeof arg === 'number') {\n\t\t\treturn arg;\n\t\t}\n\n\t\tif (typeof arg !== 'object') {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (Array.isArray(arg)) {\n\t\t\treturn classNames.apply(null, arg);\n\t\t}\n\n\t\tif (arg.toString !== Object.prototype.toString && !arg.toString.toString().includes('[native code]')) {\n\t\t\treturn arg.toString();\n\t\t}\n\n\t\tvar classes = '';\n\n\t\tfor (var key in arg) {\n\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\tclasses = appendClass(classes, key);\n\t\t\t}\n\t\t}\n\n\t\treturn classes;\n\t}\n\n\tfunction appendClass (value, newClass) {\n\t\tif (!newClass) {\n\t\t\treturn value;\n\t\t}\n\t\n\t\tif (value) {\n\t\t\treturn value + ' ' + newClass;\n\t\t}\n\t\n\t\treturn value + newClass;\n\t}\n\n\tif (typeof module !== 'undefined' && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (typeof define === 'function' && typeof define.amd === 'object' && define.amd) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\tdefine('classnames', [], function () {\n\t\t\treturn classNames;\n\t\t});\n\t} else {\n\t\twindow.classNames = classNames;\n\t}\n}());\n"],"names":["SwitchColorsButton","memo","_ref","className","children","switchColors","otherProps","currentColorIdx","setCurrentColorIdx","useState","btnStyle","useMemo","_switchColors$current","_switchColors$current2","color","textColor","background","handleClick","useCallback","prevIdx","length","_jsx","Button","onClick","style","_jsxs","PageLayout","cn","styles","hasOwn","hasOwnProperty","classNames","classes","i","arguments","arg","appendClass","parseValue","Array","isArray","apply","toString","Object","prototype","includes","key","call","value","newClass","module","exports","default"],"sourceRoot":""}